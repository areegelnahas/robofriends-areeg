{"version":3,"sources":["Card.js","CardsList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","prop","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","height","overflow","children","ErrorBoundray","state","hasError","this","setState","Component","App","onSearchChanged","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ErrorBoundary","CardsList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kOAYeA,MAVf,YAAkC,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACxB,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BL,EAA1B,cACnB,4BAAKC,GACL,2BAAIC,KCsBQI,MAzBf,SAAkBC,GAQjB,OACC,6BAGEA,EAAKC,OAAOC,KAAI,SAAAC,GACf,OAAQ,kBAAC,EAAD,CACLC,IAAMD,EAAKV,GACXA,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCPLU,MAZf,YAAsC,IAAjBC,EAAgB,EAAhBA,aACpB,OACC,yBAAKV,UAAU,OACd,2BACCA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCECI,MATf,SAAgBC,GAEf,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,OAAO,QAASC,SAAS,WACnCL,EAAMM,WCiBIC,E,kDApBd,aAAc,IAAD,8BACZ,gBACKC,MAAQ,CACZC,UAAW,GAHA,E,gEAQZC,KAAKC,SAAS,CAAEF,UAAW,M,+BAI3B,OAAGC,KAAKF,MAAMC,SACN,sCAEAC,KAAKV,MAAMM,a,GAhBOM,aCmDbC,G,wDA5Cd,aAAc,IAAD,8BACZ,gBAeDC,gBAAkB,SAACC,GAClB,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,SAf1C,EAAKV,MAAQ,CACZlB,OAAQ,GACR0B,YAAa,IAJF,E,gEAQO,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,EAAKZ,SAAS,CAACrB,OAAQiC,S,+BASf,IAAD,EACsBb,KAAKF,MAA5BlB,EADC,EACDA,OAAQ0B,EADP,EACOA,YACTQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACpC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAEtD,OAAKrC,EAAOuC,OAIV,yBAAK5C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,kBAC9B,kBAAC,EAAD,KACC,kBAACgB,EAAD,KACC,kBAACC,EAAD,CAAWzC,OAAQkC,OARhB,wBAAIvC,UAAU,SAAd,kB,GA5BQ2B,cCIEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a","file":"static/js/main.ac50810c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card({id, name, email}) {\n\treturn(\n\t\t<div className=\" tc bg-light-green dib br3 ba3 ma2 grow bw3 shad0w-5\">\n\t\t\t<img alt=\"robo\" src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n// import {robots} from './robots';\n\nfunction CardList(prop) { // or get the robots by destructuring {robots}\n\t// const cardsArray = prop.robots.map(user => {\n\t// \treturn (<Card \n\t// \t\tkey= {user.id}\n\t// \t\tid={user.id} \n\t// \t\tname={user.name} \n\t// \t\temail={user.email}/>);\n\t// });\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\t// cardsArray\n\t\t\t\tprop.robots.map(user => {\n\t\t\t\t\treturn (<Card \n\t\t\t\t\t\t\t\tkey= {user.id}\n\t\t\t\t\t\t\t\tid={user.id} \n\t\t\t\t\t\t\t\tname={user.name} \n\t\t\t\t\t\t\t\temail={user.email}/>);\n\t\t\t\t\t\t})\n\t\t \t}\n\n\t\t</div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nfunction SearchBox({ searchChange }) {\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\t className=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t type=\"search\"\n\t\t\t placeholder=\"Search Robots\" \n\t\t\t onChange={searchChange}/>\n\t\t</div>\n\t\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nfunction Scroll(props) {\n\tconsole.log(props)\n\treturn(\n\t\t<div style={{height:\"700px\", overflow:\"scroll\"}}>\n\t\t  {props.children}\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundray extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t}\n\t}\n\n\tcomponentDidCatch(){\n\t\tthis.setState({ hasError : true })\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Opssss</h1>\n\t\t} else {\n\t\t\treturn this.props.children\n\t\t}\n\t}\n}\n\nexport default ErrorBoundray;","import React, {Component} from 'react';\nimport CardsList from './CardsList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from './ErrorBoundary';\n// import {robots} from './robots';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n\t\t\treturn response.json();\n\t\t}).then(users => {\n\t\t\tthis.setState({robots: users});\n\t\t})\n\t}\n\n\tonSearchChanged = (event) => {\n\t\tthis.setState({searchField : event.target.value});\n\t\t// console.log(event.target.value);\n\t}\n\n\trender() {\n\t\tconst {robots, searchField} = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\tif (!robots.length){\n\t\t\treturn <h2 className=\"tc f2\" >Loading...</h2>\n\t\t}else{\n\t\t\treturn(\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChanged}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardsList robots={filteredRobots}/>\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}